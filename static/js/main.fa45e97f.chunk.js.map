{"version":3,"sources":["markdown-editor/HeaderBar.js","markdown-editor/defaultText.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","props","state","titleDisplay","this","className","Component","defaultText","marked","setOptions","breaks","App","handleChange","event","text","target","value","setState","renderText","__html","DOMPurify","sanitize","localStorage","getItem","setItem","onChange","name","cols","rows","id","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAqBeA,G,uDAjBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAHE,E,qDAQT,IACEC,EAAiBC,KAAKH,MAAtBE,aACR,OACI,kBAAC,WAAD,KACI,uBAAGE,UAAU,cAAb,IAA4BF,EAA5B,U,GAbQG,c,gCCHXC,EAAc,o3CCM3BC,IAAOC,WAAW,CAChBC,QAAQ,I,IA0DKC,E,kDAtDb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAOVW,aAAe,SAAAC,GACb,IAAMC,EAAOD,EAAME,OAAOC,MAC1B,EAAKC,SAAS,CAAEH,UAVG,EAarBI,WAAa,SAAAJ,GAGX,MAAO,CAAEK,OAFMC,IAAUC,SAASb,IAAOM,GAAO,CAACJ,QAAQ,MAXvD,EAAKR,MAAQ,CACTY,KAAMP,GAJO,E,gEAoBnB,IAAMO,EAAOQ,aAAaC,QAAQ,aAC9BT,EACFV,KAAKa,SAAS,CAAEH,SAGhBV,KAAKa,SAAS,CAAEH,KAAMP,M,2CAIJ,IACZO,EAASV,KAAKF,MAAdY,KACRQ,aAAaE,QAAQ,YAAaV,K,+BAKhC,OACE,yBAAKT,UAAU,OAEb,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAWF,aAAa,kCACxB,8BAAUa,MAAOZ,KAAKF,MAAMY,KAAMW,SAAUrB,KAAKQ,aAAcc,KAAK,OAAOC,KAAK,KAAKC,KAAK,KAAKC,GAAG,UAAlG,SAGF,yBAAKxB,UAAU,gBACb,kBAAC,EAAD,CAAWF,aAAa,iBACxB,yBAAK0B,GAAG,UAAUC,wBAAyB1B,KAAKc,WAAWd,KAAKF,MAAMY,c,GA/C9DR,aCEEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fa45e97f.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport '../App.css';\n\nclass HeaderBar extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             \n        }\n    }\n    \n    render() {\n        const { titleDisplay } = this.props;\n        return (\n            <Fragment>\n                <p className=\"header-bar\"> {titleDisplay} </p>\n            </Fragment>\n        )\n    }\n}\nexport default HeaderBar;","export const defaultText = \"# Ceci est un exemple de titre ! \\n ## Ici un sous-titre \\n  ### Et ici quelques autres possibilités de mise en page : On peut mettre du code `<div></div>`, entre deux backticks. \\n\\n Ici du code multi ligne : \\n  ``` \\nfunction exempleDeFonction(firstPara, secondPara) {\\n    if (true === false) {\\n          return 33;\\n        } \\n     }\\n``` \\n On peut aussi mettre du texte en **gras**... \\n \\n  Ou en _italique_. \\n\\n   Ou... attention... **_les deux!_** \\n\\n   Et tu peux aussi ~~tout barré comme ça~~.\\n\\n   Tu peux aussi faire des [liens](https://www.freecodecamp.com)\\n  et\\n  > des citations \\n \\n  Et MÊME si tu veux faire vraiment le foufou, des tableaux et tout :\\n \\n  Super entête | Une autre super entête | ... Encore un ! \\n  ------------ | :-------------: | -------------: \\n  Le contenu ici | ou là | ou encore là....\\n  Et idem pour la deuxième ligne | Enfin voilà. | T'as compris l'idée. \\n\\n  - Et bien sûr ! on peut faire des listes :\\n    - Ici un truc.\\n       - Un truc de deuxième niveau.\\n          - Voir de trois.\\n \\n  1. Et des listes numérotées\\n  1. Ouaisouaisouais\\n  6. Et ainsi de suite \\n  2. Même si tu mets n'importe quel chiffre à la place du bon, genre 1, 3, 9, 1...\\n  4. Et enfin, les images :\\n \\n  ![un chaton w/ chaton](https://jardinage.lemonde.fr/images/dossiers/2017-08/chaton-161238.jpg)\\n \"\n","import React, {Component} from 'react';\nimport './App.css';\nimport HeaderBar from'./markdown-editor/HeaderBar';\nimport marked from 'marked';\nimport DOMPurify from 'dompurify';\nimport { defaultText } from './markdown-editor/defaultText';\nmarked.setOptions({\n  breaks: true\n})\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        text: defaultText\n    }\n}\n\nhandleChange = event => {\n  const text = event.target.value\n  this.setState({ text })\n}\n\nrenderText = text => {\n  const __html = DOMPurify.sanitize(marked(text), {breaks: true})\n\n  return { __html }\n}\n\ncomponentDidMount() {\n  const text = localStorage.getItem('stockText')\n  if (text) {\n    this.setState({ text })\n  }\n  else {\n    this.setState({ text: defaultText })\n  }\n}\n\ncomponentDidUpdate() {\n  const { text } = this.state\n  localStorage.setItem('stockText', text)\n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <div className=\"editor-wrap\">\n          <HeaderBar titleDisplay=\"Saisir le texte en MarkDown :\" />\n          <textarea value={this.state.text} onChange={this.handleChange} name=\"text\" cols=\"70\" rows=\"40\" id=\"editor\">truc</textarea>\n        </div>\n\n        <div className=\"preview-wrap\">\n          <HeaderBar titleDisplay=\"Rendu HTML :\" />\n          <div id=\"preview\" dangerouslySetInnerHTML={this.renderText(this.state.text)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}